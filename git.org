#+TITLE: Git
* SETUP 基础设置
#+BEGIN_SRC bash
# username
git config --global user.name "zhiruili"
# email
git config --global user.email "zr.public@outlook.com"
# ui
git config --global color.ui auto
# proxy
git config --global https.proxy http://127.0.0.1:1080
git config --global https.proxy https://127.0.0.1:1080
git config --global --unset http.proxy
git config --global --unset https.proxy
# 读取配置，例如获取 URL
git config --get remote.origin.url
#+END_SRC
* INIT 初始化工程
#+BEGIN_SRC bash
# 本地新建
git init
# 拉取远程
git clone [url]
#+END_SRC
* STAGE & SNAPSHOT 状态 & 暂存
#+BEGIN_SRC bash
# 查看当前状态
git status
# 为下次 commit 添加文件
git add [file]
# diff 还未暂存的文件
git diff
# diff 已暂存未提交的文件
git diff --staged
# 提交
git commit -m "[descriptive message]"
#+END_SRC
* BRANCH & MERGE 分支 & 合并
#+BEGIN_SRC bash
# 列出分支
git branch
# 创建分支
git branch [branch_name]
# 检出分支
git checkout [branch-name]
# 如果不存在分支就创建一个
git checkout -b [branch-name] origin/[branch-name]
# 合并分支
git merge [branch-name]
git log
# 选择一个提交合并到当前分支
git cherry-pick [SHA]
# 取消 cherry pick
git cherry-pick --abort
# -------------------------------------------------
# 解决冲突（假设要合并到 master）
# 1. 拉取并尝试合并
git fetch origin
git checkout -b [branch-name] origin/[branch-name]
git checkout master
git merge --no-ff [branch-name]
# 2. 查看冲突文件
git status
# 3. 修改文件解决冲突
# vim xxx
git add [confict-file-name]
git commit -m '[resolve-confict-message]'
# 4. 可以查看分支状态
git log
# 5. 推送
git push origin master
# -------------------------------------------------
# 推送镜像仓库
git remote set-url --push origin [new-url]
git push --mirror
# ------------------------------------------------
# 拉取所有分支到本地
for remote in `git branch -r `; do git branch --track $remote; done
#+END_SRC
* INSPECT & COMPARE 查看 & 比较
#+BEGIN_SRC bash
# 查看提交日志
git log
# 查看 branchA 上有而 branchB 上没有的提交
git log [branchB]..[branchA]
# 展示所有改文件的改动，包括重命名
git log --follow [file]
# diff branchA 中存在而 branchB 中不存在的内容
git diff branchB...branchA
# 打印相关变动
git show [SHA]
#+END_SRC
* TRACKING PATH CHANGES 改变路径
#+BEGIN_SRC bash
# 删除指定文件
git rm [file]
# 改变文件路径
git mv [existing-path] [new-path]
# show all commit logs with indication of any paths that moved
git log --stat -M
#+END_SRC
* IGNORING PATTERNS 忽略
#+BEGIN_SRC gitignore
# .gitignore
logs/
*.notes
pattern*/
#+END_SRC
#+BEGIN_SRC bash
# system wide ignore patern for all local repositories
git config --global core.excludesfile [file]
#+END_SRC
* SHARE & UPDATE 共享 & 更新
#+BEGIN_SRC bash
# 添加一个 git URL 的别名
git remote add [alias] [url]
# 例如将本地的工程添加到远程
git remote add origin remote repository [url]
git remote -v
git push -u origin master
# 从远程拉取所有的 branch
git fetch [alias]
# 合并分支
git merge [alias]/[branch]
# 推送修改
git push [alias] [branch]
git push origin branch-local:branch-remote
# 拉取远程修改
git pull
#+END_SRC
* REWRITE HISTORY 修改历史
#+BEGIN_SRC bash
# apply any commits of current branch ahead of specified one
git rebase [branch]
# clear staging area, rewrite working tree from specified commit
git reset --hard [commit]
#+END_SRC
* TEMPORARY COMMITS 临时提交
#+BEGIN_SRC bash
# 暂存文件
git stash
# 列出暂存的文件
git stash list
# write working from top of stash stack
git stash pop
# discard the changes from top of stash stack
git stash drop
#+END_SRC
* REVERT 回滚
#+BEGIN_SRC bash
# 放弃本地修改
git checkout -- .
git checkout -- [path/to/file/to/revert]
# 回滚已经 commit 的文件
git reset [file]
git reset --soft HEAD~1
git reset --soft HEAD^
git reset --hard origin/[branch-name]
git reset --hard [SHA]
# 清理本地未跟踪的修改
git clean -fd
# 危险！强制上传文件
# 例如先回滚到一个比较老的提交，然后将这个回滚强行提交到远程
git push -u origin [branch] -f
#+END_SRC
* SUBMODULE 子模块
#+BEGIN_SRC bash
# 添加子模块
git submodule add [url] [path]
# 更新子模块
git submodule update --init --recursive
# 更新子模块
git submodule update --remote
# 拉取带子模块的代码
git clone --recurse-submodules [url] [path]
#+END_SRC
* References
- git cheatsheet https://education.github.com/git-cheat-sheet-education.pdf
- git visualized gif https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1
